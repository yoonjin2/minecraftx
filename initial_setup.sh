#!/bin/bash
VERSION="22.04"
OPTION=$1
if [ -z $OPTION ] 
then
	OPTION="NONE"
fi
echo "Setup script of Minecraft Server -- "
sleep  0.5
if [ $(whoami) = "root" ]
then
		echo "Already admin! Entering setup.."
else
		echo "Please enter your password to switch to root"
		sudo -s
fi
sleep 1
apt-get update -y
release="jammy"
curl -fsSL https://www.mongodb.org/static/pgp/server-6.0.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/mongodb-6.gpg
echo "deb [ arch=amd64,arm64 ] https://repo.mongodb.org/apt/ubuntu $release/mongodb-org/6.0 multiverse" > /etc/apt/sources.list.d/mongodb-org-6.0.list
wget http://archive.ubuntu.com/ubuntu/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.16_amd64.deb
sudo dpkg -i ./libssl1.1_1.1.1f-1ubuntu2.16_amd64.deb
sudo apt-get update
sudo apt-get  -y install mongodb-org nginx
echo "export PATH=$PATH+":/var/lib/snapd/snap/bin"" >> /root/.bashrc
source /root/.bashrc
systemctl enable snapd
systemctl start snapd
#ausearch -c 'snap-confine- - | audit2allow -M my-snapconfine'
#semodule -X 300 -i my-snapconfine.pp
systemctl restart snapd
snap remove lxd
snap install lxd
cat > mongodb_cgroup_memory.te <<EOF
module mongodb_cgroup_memory 1.0;
require {
      type cgroup_t;
      type mongod_t;
      class dir search;
      class file { getattr open read };
}
#============= mongod_t ==============
allow mongod_t cgroup_t:dir search;
allow mongod_t cgroup_t:file { getattr open read };
EOF
#checkmodule -M -m -o mongodb_cgroup_memory.mod mongodb_cgroup_memory.te
#semodule_package -o mongodb_cgroup_memory.pp -m mongodb_cgroup_memory.mod
#sudo semodule -i mongodb_cgroup_memory.pp
#sudo semanage port -a -t mongod_port_t -p tcp 19999
systemctl restart mongod
if [ $OPTION = "--reconfigure-lxd" ]
then
	apt-get -y install nginx
	systemctl enable nginx
	lxd init
fi
NET_INTERFACE="$(ip route get 1 | awk '{print $5}')"
lxc profile device set default $NET_INTERFACE nictype bridged
BRIDGE_NAME=lxdbr0
INTERFACE_NAME=$(ip route get 1 | awk '{print $5}')
IP_ADDRESS=$(ip route get 1 | awk '{print $7}')

sleep 2
cat mongo.props | mongosh --port 19999

#systemctl stop --now dnsmasq
#systemctl disable dnsmasq
#systemctl restart lxd
mkdir container
mkdir properties
touch container/latest_access
lxc launch ubuntu/$VERSION base

firewall-cmd --permanent --zone=public --add-port 8843/tcp
firewall-cmd --permanent --zone=public --add-port 53/tcp
firewall-cmd --permanent --zone=public --add-port 67/tcp
firewall-cmd --permanent --zone=public --add-port 8843/udp
firewall-cmd --permanent --zone=public --add-port 19132/tcp
firewall-cmd --permanent --zone=public --add-port 19132/udp
firewall-cmd --permanent --zone=public --add-port 19133/tcp
firewall-cmd --permanent --zone=public --add-port 19133/udp
firewall-cmd --permanent --zone=public --add-port 25565/tcp
firewall-cmd --permanent --zone=public --add-port 25565/udp
firewall-cmd --permanent --zone=public --add-port 25566/tcp
firewall-cmd --permanent --zone=public --add-port 25566/udp
for i in {30000..30001..60000}
do 
		semanage port -a -t http_port_t -p tcp $i
done
firewall-cmd --permanent --zone=public --add-port 25565-60000/udp
firewall-cmd --permanent --zone=public --add-port 8843/udp
firewall-cmd --permanent --zone=public --add-port 8843/tcp
firewall-cmd --permanent --zone=public --add-port 25565-60000/tcp
firewall-cmd --zone=trusted --change-interface=lxdbr0 --permanent
firewall-cmd --permanent --direct --add-rule ipv4 filter INPUT 0 -i lxdbr0 -s 0.0.0.0/24 -m comment --comment "generated by firewalld for LXD" -j ACCEPT
firewall-cmd --permanent --direct --add-rule ipv4 filter OUTPUT 0 -o lxdbr0 -d 0.0.0.0/24 -m comment --comment "generated by firewalld for LXD" -j ACCEPT
firewall-cmd --permanent --direct --add-rule ipv4 filter FORWARD 0 -i lxdbr0 -s 0.0.0.0/24 -m comment --comment "generated by firewalld for LXD" -j ACCEPT
firewall-cmd --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 0.0.0.0/24 ! -d 0.0.0.0/24 -m comment --comment "generated by firewalld for LXD" -j MASQUERADE
firewall-cmd --reload
lxc stop base
lxc delete base
echo "load_module /usr/lib64/nginx/modules/ngx_stream_module.so;" > /etc/nginx/nginx.conf
echo "events{}" >> /etc/nginx/nginx.conf
echo "stream {
}" >> /etc/nginx/nginx.conf
#ausearch -c 'nginx' --raw | audit2allow -M my-nginx
#semodule -X 300 -i my-nginx.pp
./install_svc.sh
systemctl restart NetworkManager
